[gd_resource type="VisualShader" load_steps=13 format=3 uid="uid://d2clywjv2yw54"]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_4bac1"]
linked_parent_graph_frame = 17
size = Vector2(580, 1600)
expression = "const int OFFSET_MIDLAND = 4;
const int OFFSET_MOUNT = 8;
const int OFFSET_COUNTRY = 12;
const int OFFSET_CITY = 16;
const int OFFSET_AIRFIELD = 20;
const int OFFSET_WOOD = 24;
const int OFFSET_WATER = 28;
const float DIFF = 0.0001f;
/**
 * In theory, RGB max is 255.
 * In practice, it's around 211.
 */
const float RGB_MAX = 211.0f;

float samples[9];
vec2 offset;
for(int row = -1; row <= 1; ++row)
{
	for(int col = -1; col <= 1; ++col)
	{
		offset = UV + vec2(DIFF * float(col), DIFF * float(row));
		samples[(row+1) * 3 + (col+1)] = texture(typeSample, offset).r;
	}
}

vec3 colorSum = vec3(0);
int code;
int field;
int index;
// traverse surrounding samples
for(int i = 0; i < 9; ++i)
{
	// convert [0,1] to [0,RGB_MAX]
	code = int(samples[i] * RGB_MAX);
	field = code % 32;
	index = field % 4;
	if(field < OFFSET_MIDLAND)
	{
		colorSum += triplanar_xz(fLowLand[index]);
	}
	else if(field < OFFSET_MOUNT)
	{
		colorSum += triplanar_xz(fMidLand[index]);
	}
	else if(field < OFFSET_COUNTRY)
	{
		colorSum += triplanar_xz(fMount[index]);
	}
	else if(field < OFFSET_CITY)
	{
		colorSum += triplanar_xz(fCountry[index]);
	}
	else if(field < OFFSET_AIRFIELD)
	{
		colorSum += triplanar_xz(fCity[index]);
	}
	else if(field < OFFSET_WOOD)
	{
		colorSum += triplanar_xz(fAirField[index]);
	}
	else if(field < OFFSET_WATER)
	{
		colorSum += triplanar_xz(fWood[2]);
	}
	else
	{
		colorSum += triplanar_xz(fWater[index]);
	}
}
COLOR = colorSum / vec3(9);"

[sub_resource type="VisualShaderNodeFrame" id="VisualShaderNodeFrame_gryvc"]
size = Vector2(660, 1680)
title = "Terrain Texture Blending"
attached_nodes = PackedInt32Array(10)

[sub_resource type="VisualShaderNodeGlobalExpression" id="VisualShaderNodeGlobalExpression_0jpia"]
size = Vector2(580, 340)
expression = "uniform sampler2D fLowLand[4] : filter_nearest_mipmap, source_color;
uniform sampler2D fMidLand[4] : filter_nearest_mipmap, source_color;
uniform sampler2D fMount[4] : filter_nearest_mipmap, source_color;
uniform sampler2D fCountry[4] : filter_nearest_mipmap, source_color;
uniform sampler2D fCity[4] : filter_nearest_mipmap, source_color;
uniform sampler2D fAirField[4] : filter_nearest_mipmap, source_color;
uniform sampler2D fWood[4] : filter_nearest_mipmap, source_color;
uniform sampler2D fWater[4] : filter_nearest_mipmap, source_color;

vec3 triplanar_xz(sampler2D sampler) 
{
	return texture(sampler, var_scaledVert.xz).rgb;
}"

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_qevf3"]
parameter_name = "fTypemap"
color_default = 1
texture_filter = 1
texture_repeat = 2

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_moouh"]
parameter_name = "vHeightmap"
texture_type = 1
color_default = 1
texture_filter = 4
texture_repeat = 2

[sub_resource type="VisualShaderNodeFrame" id="VisualShaderNodeFrame_siig2"]
size = Vector2(580, 280)
title = "Vertex Height Offset"
attached_nodes = PackedInt32Array(52)

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_qitm4"]
linked_parent_graph_frame = 50
size = Vector2(700, 400)
expression = "const float DIFF = 0.0001f;
const float SCALE = 0.02f;

vec2 right = vec2(DIFF, 0);
vec2 up = vec2(0, DIFF);

float sampleL = texture(heightmap, UV - right).r;
float sampleR = texture(heightmap, UV + right).r;
float sampleD = texture(heightmap, UV - up).r;
float sampleU = texture(heightmap, UV + up).r;

NORMAL = normalize(vec3(sampleL - sampleR, SCALE, sampleD - sampleU));"

[sub_resource type="VisualShaderNodeFrame" id="VisualShaderNodeFrame_aye1k"]
size = Vector2(780, 480)
title = "Central Differences Normal"
attached_nodes = PackedInt32Array(49)

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_1i36r"]
linked_parent_graph_frame = 30
size = Vector2(500, 200)
expression = "const float MAX_HEIGHT = 1024.0f;
float sample = texture(heightmap, UV).g;
OFFSET = VERTEX + vec3(0, sample * MAX_HEIGHT, 0);"

[sub_resource type="VisualShaderNodeVaryingSetter" id="VisualShaderNodeVaryingSetter_h42gl"]
varying_name = "scaledVert"
varying_type = 4

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_2huc5"]
linked_parent_graph_frame = 60
size = Vector2(420, 200)
expression = "const float DIVISOR = 512.0f;
SCALED_VERT = VERTEX / vec3(DIVISOR);"

[sub_resource type="VisualShaderNodeFrame" id="VisualShaderNodeFrame_4i2du"]
size = Vector2(500, 280)
title = "Vertex Position Scaling"
attached_nodes = PackedInt32Array(59)

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;


// Varyings
varying vec3 var_scaledVert;

uniform sampler2D vHeightmap : source_color, hint_default_black, filter_linear_mipmap, repeat_disable;
uniform sampler2D fTypemap : hint_default_black, filter_nearest, repeat_disable;


// GlobalExpression:0
	uniform sampler2D fLowLand[4] : filter_nearest_mipmap, source_color;
	uniform sampler2D fMidLand[4] : filter_nearest_mipmap, source_color;
	uniform sampler2D fMount[4] : filter_nearest_mipmap, source_color;
	uniform sampler2D fCountry[4] : filter_nearest_mipmap, source_color;
	uniform sampler2D fCity[4] : filter_nearest_mipmap, source_color;
	uniform sampler2D fAirField[4] : filter_nearest_mipmap, source_color;
	uniform sampler2D fWood[4] : filter_nearest_mipmap, source_color;
	uniform sampler2D fWater[4] : filter_nearest_mipmap, source_color;
	
	vec3 triplanar_xz(sampler2D sampler) 
	{
		return texture(sampler, var_scaledVert.xz).rgb;
	}

void vertex() {
	vec3 n_out52p0;
// Expression:52
	n_out52p0 = vec3(0.0, 0.0, 0.0);
	{
		const float MAX_HEIGHT = 1024.0f;
		float sample = texture(vHeightmap, UV).g;
		n_out52p0 = VERTEX + vec3(0, sample * MAX_HEIGHT, 0);
	}


	vec3 n_out49p0;
// Expression:49
	n_out49p0 = vec3(0.0, 0.0, 0.0);
	{
		const float DIFF = 0.0001f;
		const float SCALE = 0.02f;
		
		vec2 right = vec2(DIFF, 0);
		vec2 up = vec2(0, DIFF);
		
		float sampleL = texture(vHeightmap, UV - right).r;
		float sampleR = texture(vHeightmap, UV + right).r;
		float sampleD = texture(vHeightmap, UV - up).r;
		float sampleU = texture(vHeightmap, UV + up).r;
		
		n_out49p0 = normalize(vec3(sampleL - sampleR, SCALE, sampleD - sampleU));
	}


// Output:0
	VERTEX = n_out52p0;
	NORMAL = n_out49p0;


	vec3 n_out59p0;
// Expression:59
	n_out59p0 = vec3(0.0, 0.0, 0.0);
	{
		const float DIVISOR = 512.0f;
		n_out59p0 = VERTEX / vec3(DIVISOR);
	}


// VaryingSetter:56
	var_scaledVert = n_out59p0;


}

void fragment() {
	vec3 n_out10p0;
// Expression:10
	n_out10p0 = vec3(0.0, 0.0, 0.0);
	{
		const int OFFSET_MIDLAND = 4;
		const int OFFSET_MOUNT = 8;
		const int OFFSET_COUNTRY = 12;
		const int OFFSET_CITY = 16;
		const int OFFSET_AIRFIELD = 20;
		const int OFFSET_WOOD = 24;
		const int OFFSET_WATER = 28;
		const float DIFF = 0.0001f;
		/**
		 * In theory, RGB max is 255.
		 * In practice, it's around 211.
		 */
		const float RGB_MAX = 211.0f;
		
		float samples[9];
		vec2 offset;
		for(int row = -1; row <= 1; ++row)
		{
			for(int col = -1; col <= 1; ++col)
			{
				offset = UV + vec2(DIFF * float(col), DIFF * float(row));
				samples[(row+1) * 3 + (col+1)] = texture(fTypemap, offset).r;
			}
		}
		
		vec3 colorSum = vec3(0);
		int code;
		int field;
		int index;
		// traverse surrounding samples
		for(int i = 0; i < 9; ++i)
		{
			// convert [0,1] to [0,RGB_MAX]
			code = int(samples[i] * RGB_MAX);
			field = code % 32;
			index = field % 4;
			if(field < OFFSET_MIDLAND)
			{
				colorSum += triplanar_xz(fLowLand[index]);
			}
			else if(field < OFFSET_MOUNT)
			{
				colorSum += triplanar_xz(fMidLand[index]);
			}
			else if(field < OFFSET_COUNTRY)
			{
				colorSum += triplanar_xz(fMount[index]);
			}
			else if(field < OFFSET_CITY)
			{
				colorSum += triplanar_xz(fCountry[index]);
			}
			else if(field < OFFSET_AIRFIELD)
			{
				colorSum += triplanar_xz(fCity[index]);
			}
			else if(field < OFFSET_WOOD)
			{
				colorSum += triplanar_xz(fAirField[index]);
			}
			else if(field < OFFSET_WATER)
			{
				colorSum += triplanar_xz(fWood[2]);
			}
			else
			{
				colorSum += triplanar_xz(fWater[index]);
			}
		}
		n_out10p0 = colorSum / vec3(9);
	}


// Output:0
	ALBEDO = n_out10p0;


}
"
graph_offset = Vector2(-1169.32, 443.022)
varyings/scaledVert = "0,4"
nodes/vertex/0/position = Vector2(220, 740)
nodes/vertex/2/node = SubResource("VisualShaderNodeTexture2DParameter_moouh")
nodes/vertex/2/position = Vector2(-860, 460)
nodes/vertex/30/node = SubResource("VisualShaderNodeFrame_siig2")
nodes/vertex/30/position = Vector2(-580, 280)
nodes/vertex/49/node = SubResource("VisualShaderNodeExpression_qitm4")
nodes/vertex/49/position = Vector2(-540, 780)
nodes/vertex/49/size = Vector2(700, 400)
nodes/vertex/49/input_ports = "0,8,heightmap;"
nodes/vertex/49/output_ports = "0,4,NORMAL;"
nodes/vertex/49/expression = "const float DIFF = 0.0001f;
const float SCALE = 0.02f;

vec2 right = vec2(DIFF, 0);
vec2 up = vec2(0, DIFF);

float sampleL = texture(heightmap, UV - right).r;
float sampleR = texture(heightmap, UV + right).r;
float sampleD = texture(heightmap, UV - up).r;
float sampleU = texture(heightmap, UV + up).r;

NORMAL = normalize(vec3(sampleL - sampleR, SCALE, sampleD - sampleU));"
nodes/vertex/50/node = SubResource("VisualShaderNodeFrame_aye1k")
nodes/vertex/50/position = Vector2(-580, 740)
nodes/vertex/52/node = SubResource("VisualShaderNodeExpression_1i36r")
nodes/vertex/52/position = Vector2(-540, 480)
nodes/vertex/52/size = Vector2(500, 200)
nodes/vertex/52/input_ports = "0,8,heightmap;"
nodes/vertex/52/output_ports = "0,4,OFFSET;"
nodes/vertex/52/expression = "const float MAX_HEIGHT = 1024.0f;
float sample = texture(heightmap, UV).g;
OFFSET = VERTEX + vec3(0, sample * MAX_HEIGHT, 0);"
nodes/vertex/56/node = SubResource("VisualShaderNodeVaryingSetter_h42gl")
nodes/vertex/56/position = Vector2(600, 520)
nodes/vertex/59/node = SubResource("VisualShaderNodeExpression_2huc5")
nodes/vertex/59/position = Vector2(120, 480)
nodes/vertex/59/size = Vector2(420, 200)
nodes/vertex/59/input_ports = ""
nodes/vertex/59/output_ports = "0,4,SCALED_VERT;"
nodes/vertex/59/expression = "const float DIVISOR = 512.0f;
SCALED_VERT = VERTEX / vec3(DIVISOR);"
nodes/vertex/60/node = SubResource("VisualShaderNodeFrame_4i2du")
nodes/vertex/60/position = Vector2(-440, 140)
nodes/vertex/connections = PackedInt32Array(2, 0, 49, 0, 49, 0, 0, 1, 52, 0, 0, 0, 2, 0, 52, 0, 59, 0, 56, 0)
nodes/fragment/0/position = Vector2(-240, 340)
nodes/fragment/5/node = SubResource("VisualShaderNodeTexture2DParameter_qevf3")
nodes/fragment/5/position = Vector2(-1220, 100)
nodes/fragment/10/node = SubResource("VisualShaderNodeExpression_4bac1")
nodes/fragment/10/position = Vector2(-900, 300)
nodes/fragment/10/size = Vector2(580, 1600)
nodes/fragment/10/input_ports = "0,8,typeSample;"
nodes/fragment/10/output_ports = "0,4,COLOR;"
nodes/fragment/10/expression = "const int OFFSET_MIDLAND = 4;
const int OFFSET_MOUNT = 8;
const int OFFSET_COUNTRY = 12;
const int OFFSET_CITY = 16;
const int OFFSET_AIRFIELD = 20;
const int OFFSET_WOOD = 24;
const int OFFSET_WATER = 28;
const float DIFF = 0.0001f;
/**
 * In theory, RGB max is 255.
 * In practice, it's around 211.
 */
const float RGB_MAX = 211.0f;

float samples[9];
vec2 offset;
for(int row = -1; row <= 1; ++row)
{
	for(int col = -1; col <= 1; ++col)
	{
		offset = UV + vec2(DIFF * float(col), DIFF * float(row));
		samples[(row+1) * 3 + (col+1)] = texture(typeSample, offset).r;
	}
}

vec3 colorSum = vec3(0);
int code;
int field;
int index;
// traverse surrounding samples
for(int i = 0; i < 9; ++i)
{
	// convert [0,1] to [0,RGB_MAX]
	code = int(samples[i] * RGB_MAX);
	field = code % 32;
	index = field % 4;
	if(field < OFFSET_MIDLAND)
	{
		colorSum += triplanar_xz(fLowLand[index]);
	}
	else if(field < OFFSET_MOUNT)
	{
		colorSum += triplanar_xz(fMidLand[index]);
	}
	else if(field < OFFSET_COUNTRY)
	{
		colorSum += triplanar_xz(fMount[index]);
	}
	else if(field < OFFSET_CITY)
	{
		colorSum += triplanar_xz(fCountry[index]);
	}
	else if(field < OFFSET_AIRFIELD)
	{
		colorSum += triplanar_xz(fCity[index]);
	}
	else if(field < OFFSET_WOOD)
	{
		colorSum += triplanar_xz(fAirField[index]);
	}
	else if(field < OFFSET_WATER)
	{
		colorSum += triplanar_xz(fWood[2]);
	}
	else
	{
		colorSum += triplanar_xz(fWater[index]);
	}
}
COLOR = colorSum / vec3(9);"
nodes/fragment/17/node = SubResource("VisualShaderNodeFrame_gryvc")
nodes/fragment/17/position = Vector2(-900, 260)
nodes/fragment/18/node = SubResource("VisualShaderNodeGlobalExpression_0jpia")
nodes/fragment/18/position = Vector2(-900, -100)
nodes/fragment/18/size = Vector2(580, 340)
nodes/fragment/18/input_ports = ""
nodes/fragment/18/output_ports = ""
nodes/fragment/18/expression = "uniform sampler2D fLowLand[4] : filter_nearest_mipmap, source_color;
uniform sampler2D fMidLand[4] : filter_nearest_mipmap, source_color;
uniform sampler2D fMount[4] : filter_nearest_mipmap, source_color;
uniform sampler2D fCountry[4] : filter_nearest_mipmap, source_color;
uniform sampler2D fCity[4] : filter_nearest_mipmap, source_color;
uniform sampler2D fAirField[4] : filter_nearest_mipmap, source_color;
uniform sampler2D fWood[4] : filter_nearest_mipmap, source_color;
uniform sampler2D fWater[4] : filter_nearest_mipmap, source_color;

vec3 triplanar_xz(sampler2D sampler) 
{
	return texture(sampler, var_scaledVert.xz).rgb;
}"
nodes/fragment/connections = PackedInt32Array(10, 0, 0, 0, 5, 0, 10, 0)
